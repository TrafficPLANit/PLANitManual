<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PLANit â€“ Physical Cost</title>
    <link>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/physicalcost/</link>
    <description>Recent content in Physical Cost on PLANit</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/physicalcost/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: BPR</title>
      <link>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/physicalcost/bpr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/physicalcost/bpr/</guid>
      <description>
        
        
        &lt;h5 id=&#34;description&#34;&gt;Description&lt;/h5&gt;
&lt;p&gt;Travel time on a link for a particular mode is computed using a specific link performance function that relates flow uniquely to a travel time utilising a strictly increasing monotonic function know as the BPR&lt;sup&gt;1&lt;/sup&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\Large \tau_a = \tau_a^{ \textrm {freeflow}}(1+ \alpha({v_a \over C_a})^{\beta})\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\tau= \textrm{travel time on link} a,\\ \tau^{ \textrm {freeflow}}= \textrm{free flow travel time},\\ \alpha = \textrm {calibration parameter},\\ \beta = \textrm {calibration parameter},\\ v_a = \textrm {measured flow on link } a,\\ C_a = \textrm {saturation flow on link } a,\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; United States, Bureau of Public Roads, Traffic assignment manual. (1964). Washington.&lt;/p&gt;
&lt;h4 id=&#34;use&#34;&gt;Use&lt;/h4&gt;
&lt;p&gt;Assuming &lt;code&gt;instance = PLANit()&lt;/code&gt; is available, and &lt;code&gt;instance.set(TrafficAssignment.&amp;lt;enum&amp;gt;)&lt;/code&gt; is invoked, and physical cost is set to BPR via &lt;code&gt;instance.assignment.set(PhysicalCost.BPR)&lt;/code&gt;, then the BPR function can be configured via &lt;code&gt;instance.assignment.physical_cost&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;type&#34;&gt;Type&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;PhysicalCostWrapper&lt;/code&gt; in &lt;code&gt;Wrappers.py&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../../assignment&#34;&gt;Traffic assignment&lt;/a&gt; on assignments that support this physical cost implementation&lt;br /&gt;
&lt;a href=&#34;../../enums/physicalcosttype&#34;&gt;PhysicalCost.&amp;lt;enum&amp;gt;&lt;/a&gt; for all available physical cost options&lt;br /&gt;
&lt;a href=&#34;../&#34;&gt;PhysicalCost&lt;/a&gt; landing page for all available physical cost implementations&lt;/p&gt;
&lt;h4 id=&#34;methods&#34;&gt;Methods&lt;/h4&gt;
&lt;p&gt;Memory output formatter exposes the following methods&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h4 id=&#34;properties&#34;&gt;Properties&lt;/h4&gt;
&lt;p&gt;Memory output formatter exposes the following properties&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Availability&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h4 id=&#34;example-1&#34;&gt;Example 1&lt;/h4&gt;
&lt;p&gt;TODO&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
