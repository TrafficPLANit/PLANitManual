<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PLANit â€“ Gap Function</title>
    <link>https://planitmanual.github.io/version/0_2_0/docs/python/reference/gapfunction/</link>
    <description>Recent content in Gap Function on PLANit</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://planitmanual.github.io/version/0_2_0/docs/python/reference/gapfunction/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Link Based Relative Gap Function</title>
      <link>https://planitmanual.github.io/version/0_2_0/docs/python/reference/gapfunction/linkbasedrelative/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_2_0/docs/python/reference/gapfunction/linkbasedrelative/</guid>
      <description>
        
        
        &lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;Reference documentation for the link based relative gap function.&lt;/p&gt;
&lt;p&gt;This gap function utilises the link costs across the network to establish a network wide gap. Its computation is based on the function mentioned in Bovy and Jansen (1983)&lt;sup&gt;1&lt;/sup&gt;. In this approach, you simply construct a lower bound - each iteration - that consists of all current shortest paths for all Origin-Destination (OD) pairs multiplied with the OD demand and take the difference with actual system travel time. The latter is a simple multiplication of the link flows with the link costs - in the current iteration. One then divides this absolute gap by the total system travel time to obtain the relative gap. Hence its name, link based relative gap. Mathematically, it can be defined as follows:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\Large \delta^{\textrm relative} = { (\sum_{a}^{A} c_a \cdot f_a) \cdot (\sum_{w}^{W} c_w^* \cdot d_w) \over {\sum_{a}^{A} c_a \cdot f_a}}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\delta^{\textrm relative}= \textrm{relative duality gap},\\ c_a= \textrm{cost (h) on link segment } a,\\ c_w^*= \textrm{ path minimum cost (h) connecting OD pair } w,\\ d_w= \textrm{ total demand (veh/h) for OD pair } w,\\ f_a= \textrm{flow (veh/h) on link segment } a,\\ A= \textrm{ total number of links},\\ W= \textrm{ total number of OD pairs}\)&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All link based gap functions are only suitable for traffic assignment methods that have link additive path costs, i.e., when we can add the link costs to construct the path cost, we can also use the link costs to determine the gap.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; Bovy, P., &amp;amp; Jansen, G. (1983). Network aggregation effects upon equilibrium assignment outcomes: An empirical investigation. Transportation Science, 17(3), 240-261.&lt;/p&gt;
&lt;h4 id=&#34;defaults&#34;&gt;Defaults&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Value&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;../../../../units&#34;&gt;Unit&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;a href=&#34;../../stopcriterion&#34;&gt;Stop criterion&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Object instance&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;../../stopcriterion/default&#34;&gt;Default Stop Criterion&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;methods&#34;&gt;Methods&lt;/h4&gt;
&lt;p&gt;This class does not expose any methods (yet)&lt;/p&gt;
&lt;h4 id=&#34;properties&#34;&gt;Properties&lt;/h4&gt;
&lt;p&gt;This class exposes the following properties:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Availability&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;a href=&#34;lbrgf_stop_criterion&#34;&gt;&lt;code&gt;.stop_criterion&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Always&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Access to the stop criterion instance&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;example-1&#34;&gt;Example 1&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode python&#34;&gt;&lt;code class=&#34;sourceCode python&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;im&#34;&gt;from&lt;/span&gt; planit &lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# choose to run PLANit with a traditional static traffic assignment method&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;planit_instance &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; PLANit()&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;planit_instance.&lt;span class=&#34;bu&#34;&gt;set&lt;/span&gt;(TrafficAssignment.TRADITIONAL_STATIC)&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# collect the stop criterion to do something&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;planit_instance.assignment.gap_function.stop_criterion.&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;call method&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../../assignment&#34;&gt;Traffic Assignment&lt;/a&gt; on what traffic assignment methods are available&lt;br /&gt;
&lt;a href=&#34;../../stopcriterion/default&#34;&gt;StopCriterion&lt;/a&gt; default implementation&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;GapFunctionWrapper&lt;/code&gt; in &lt;code&gt;Wrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
