<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> – Gap Function</title>
    <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/gapfunction/</link>
    <description>Recent content in Gap Function on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	  <atom:link href="https://planitmanual.github.io/version/0_4_0/docs/python/reference/gapfunction/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Link Based Relative Gap Function</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/gapfunction/linkbasedrelative/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/gapfunction/linkbasedrelative/</guid>
      <description>
        
        
        &lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;Reference documentation for the link based relative gap function.&lt;/p&gt;
&lt;p&gt;This gap function utilises the link costs across the network to
establish a network wide gap. Its computation is based on the function
mentioned in Bovy and Jansen (1983)&lt;sup&gt;1&lt;/sup&gt;. In this approach, you
simply construct a lower bound - each iteration - that consists of all
current shortest paths for all Origin-Destination (OD) pairs multiplied
with the OD demand and take the difference with actual system travel
time. The latter is a simple multiplication of the link flows with the
link costs - in the current iteration. One then divides this absolute
gap by the total system travel time to obtain the relative gap. Hence
its name, link based relative gap. Mathematically, it can be defined as
follows:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\Large \delta^{\textrm relative} = {
(\sum_{a}^{A} c_a \cdot f_a) \cdot (\sum_{w}^{W} c_w^* \cdot d_w) \over
{\sum_{a}^{A} c_a \cdot f_a}}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\delta^{\textrm relative}=
\textrm{relative duality gap},\\ c_a= \textrm{cost (h) on link segment }
a,\\ c_w^*= \textrm{ path minimum cost (h) connecting OD pair } w,\\
d_w= \textrm{ total demand (veh/h) for OD pair } w,\\ f_a= \textrm{flow
(veh/h) on link segment } a,\\ A= \textrm{ total number of links},\\ W=
\textrm{ total number of OD pairs}\)&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All link based gap functions are only suitable for traffic assignment
methods that have link additive path costs, i.e., when we can add the
link costs to construct the path cost, we can also use the link costs to
determine the gap.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; Bovy, P., &amp;amp; Jansen, G. (1983). Network aggregation
effects upon equilibrium assignment outcomes: An empirical
investigation. Transportation Science, 17(3), 240-261.&lt;/p&gt;
&lt;h4 id=&#34;defaults&#34;&gt;Defaults&lt;/h4&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 22%&#34; /&gt;
&lt;col style=&#34;width: 22%&#34; /&gt;
&lt;col style=&#34;width: 27%&#34; /&gt;
&lt;col style=&#34;width: 27%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Value&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;a
href=&#34;../../../../units&#34;&gt;Unit&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;a href=&#34;../../stopcriterion&#34;&gt;Stop
criterion&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Object instance&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a
href=&#34;../../stopcriterion/default&#34;&gt;Default Stop Criterion&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;methods&#34;&gt;Methods&lt;/h4&gt;
&lt;p&gt;This class does not expose any methods (yet)&lt;/p&gt;
&lt;h4 id=&#34;properties&#34;&gt;Properties&lt;/h4&gt;
&lt;p&gt;This class exposes the following properties:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 33%&#34; /&gt;
&lt;col style=&#34;width: 33%&#34; /&gt;
&lt;col style=&#34;width: 33%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Availability&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;a
href=&#34;lbrgf_stop_criterion&#34;&gt;&lt;code&gt;.stop_criterion&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Always&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Access to the stop criterion instance&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;example-1&#34;&gt;Example 1&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre
class=&#34;sourceCode python&#34;&gt;&lt;code class=&#34;sourceCode python&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;im&#34;&gt;from&lt;/span&gt; planit &lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# choose to run PLANit with a traditional static traffic assignment method&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# This has the link based relative gap as a default already&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;planit_instance &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; Planit()&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;planit_instance.project.&lt;span class=&#34;bu&#34;&gt;set&lt;/span&gt;(TrafficAssignment.TRADITIONAL_STATIC)&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# while not needed it can be set explicitly via&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# planit_instance.project.assignment.set(GapFunction.LINK_BASED_RELATIVE) &lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# collect the stop criterion to do something&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;planit_instance.project.assignment.gap_function.stop_criterion.&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;call method&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../../assignment&#34;&gt;Traffic Assignment&lt;/a&gt; on what traffic
assignment methods are available&lt;br /&gt;
&lt;a href=&#34;../../stopcriterion/default&#34;&gt;StopCriterion&lt;/a&gt; default
implementation&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;GapFunctionWrapper&lt;/code&gt; in
&lt;code&gt;projectwrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Norm Based Gap Function</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/gapfunction/normbased/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/gapfunction/normbased/</guid>
      <description>
        
        
        &lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;Reference documentation for a simple norm based gap function (where
if the norm is set to 1, i.e. &lt;span class=&#34;math inline&#34;&gt;\(p=1\)&lt;/span&gt;,
we take the absolute difference).&lt;/p&gt;
&lt;p&gt;This gap function utilises a norm based approach to computing the
gap. It depends on the assignment method what variables are used to
compute the gap. In general the user has to choose the norm (norm 1,
norm 2, …, norm p) to apply and we also allow the user to choose whether
or not the result is to be averaged or not, i.e., divide the result by
the number of entries considered. It also hosts a stop criterion to
determine when the gap is deemed small enough to be considered
sufficient. This criterion is user configurable as well. Mathematically,
the norm based gap is defined as follows:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\Large \delta = {1 \over |\mathbf{x}|}
\sqrt[\leftroot{-3}\uproot{3}p]{ (x_1^{i-1}-x_1^i)^p + ... +
(x_{|\mathbf{x}|}^{i-1}-x_{|\mathbf{x}|}^i)^p}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\delta = \textrm{gap},\\ p = \textrm{norm
to apply, e.g. norm 2 requires } p=2,\\ i = \textrm{iteration},\\
\mathbf{x} = \textrm{vector of the variable }x \textrm{ we take the gap
over between iterations, e.g., travel time cost},\\\)&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When the averaged option is not activated, the portion of the
equation where we multiply by &lt;span class=&#34;math inline&#34;&gt;\({1 \over
|\mathbf{x}|}\)&lt;/span&gt; is left out&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;defaults&#34;&gt;Defaults&lt;/h4&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 22%&#34; /&gt;
&lt;col style=&#34;width: 22%&#34; /&gt;
&lt;col style=&#34;width: 27%&#34; /&gt;
&lt;col style=&#34;width: 27%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Value&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;&lt;a
href=&#34;../../../../units&#34;&gt;Unit&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;a href=&#34;../../stopcriterion&#34;&gt;Stop
criterion&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Object instance&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a
href=&#34;../../stopcriterion/default&#34;&gt;Default Stop Criterion&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Norm&lt;/code&gt; (&lt;span
class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;)&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Averaged&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;methods&#34;&gt;Methods&lt;/h4&gt;
&lt;p&gt;This class exposes the following methods&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 42%&#34; /&gt;
&lt;col style=&#34;width: 57%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;nbgf_set_norm+&#34;&gt;&lt;code&gt;.set_norm(+)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Override the default norm &lt;span
class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;a href=&#34;nbgf_set_averaged+&#34;&gt;&lt;code&gt;.set_averaged(+)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Override the default averaged setting&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;properties&#34;&gt;Properties&lt;/h4&gt;
&lt;p&gt;This class exposes the following properties:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 33%&#34; /&gt;
&lt;col style=&#34;width: 33%&#34; /&gt;
&lt;col style=&#34;width: 33%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Availability&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;a
href=&#34;nbgf_stop_criterion&#34;&gt;&lt;code&gt;.stop_criterion&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Always&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;Access to the stop criterion instance&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;example-1&#34;&gt;Example 1&lt;/h4&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre
class=&#34;sourceCode python&#34;&gt;&lt;code class=&#34;sourceCode python&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;im&#34;&gt;from&lt;/span&gt; planit &lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# choose to run PLANit with a the Static Link Transmission Model assignment method&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# This has the norm based gap as a default already&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;planit_instance &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; Planit()&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;planit_instance.project.&lt;span class=&#34;bu&#34;&gt;set&lt;/span&gt;(TrafficAssignment.SLTM)&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# while not needed it can be set explicitly via&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# planit_instance.project.assignment.set(GapFunction.NORM_BASED) &lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# change the norm to use from 1 to 2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;planit_instance.project.assignment.gap_function.set_norm(&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../../assignment&#34;&gt;Traffic Assignment&lt;/a&gt; on what traffic
assignment methods are available&lt;br /&gt;
&lt;a href=&#34;../../stopcriterion/default&#34;&gt;StopCriterion&lt;/a&gt; default
implementation&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;GapFunctionWrapper&lt;/code&gt; in
&lt;code&gt;projectwrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
