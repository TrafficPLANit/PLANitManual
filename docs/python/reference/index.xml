<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ PLANit-Python Reference</title>
    <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/</link>
    <description>Recent content in PLANit-Python Reference on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	  <atom:link href="https://planitmanual.github.io/version/0_4_0/docs/python/reference/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Planit()</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/planit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/planit/</guid>
      <description>
        
        
        &lt;h5 id=&#34;description&#34;&gt;Description&lt;/h5&gt;
&lt;p&gt;This class is the starting point for anything PLANit, whether it be an assignment project or the reader/writing, conversion of networks. You start here by creating an instance
and then either collect/create an assignment project (to conduct a traffic assignment) or a conversion factory (to conduct parse/persist/conversion of a network of some kind).&lt;/p&gt;
&lt;h4 id=&#34;methods&#34;&gt;Methods&lt;/h4&gt;
&lt;p&gt;Planit exposes the following methods&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;planit_create_project+&#34;&gt;&lt;code&gt;.create_project(+)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;create a novel assignment project with user configurable input directory&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;properties&#34;&gt;Properties&lt;/h4&gt;
&lt;p&gt;Planit exposes the following properties&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Availability&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;planit_project&#34;&gt;&lt;code&gt;.project&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Always&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Access assignment project instance, if  &lt;a href=&#34;create_project+&#34;&gt;&lt;code&gt;.create_project(+)&lt;/code&gt;&lt;/a&gt; is not called beforehand, a default project is created and returned&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;planit_converter_factory&#34;&gt;&lt;code&gt;.converter_factory&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Always&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Access to converter factory that allows you to create (network) converters&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;example-1&#34;&gt;Example 1&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;planit&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# create a planit assignment project instance using &amp;#34;.&amp;#34; as the location for the input files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Planit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;planit_project&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;create_project&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-2&#34;&gt;Example 2&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;planit&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# create a planit assignment project using a custom location to search for input files instead&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Planit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;planit_project&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;create_project&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;c:/users/&amp;lt;username&amp;gt;/my_project&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-3&#34;&gt;Example 3&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;planit&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# create a planit network converter to convert a network from one format to another&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Planit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;converter_factory&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;converter_factory&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ConverterType&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NETWORK&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    For comprehensive examples, please have a look at the PLANit-Python &lt;a href=&#34;../../examples&#34;&gt;Examples&lt;/a&gt; section.

&lt;/div&gt;

&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../planitproject&#34;&gt;&lt;code&gt;PlanitProject()&lt;/code&gt;&lt;/a&gt; for information on traffic assignment project configuration&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../converterfactory&#34;&gt;&lt;code&gt;ConverterFactory()&lt;/code&gt;&lt;/a&gt; for information on creating converters between formats&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;source-code&#34;&gt;Source code&lt;/h5&gt;
&lt;p&gt;Class &lt;code&gt;Planit&lt;/code&gt; in &lt;code&gt;Planit.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PlanitProject</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/planitproject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/planitproject/</guid>
      <description>
        
        
        &lt;h5 id=&#34;description&#34;&gt;Description&lt;/h5&gt;
&lt;p&gt;This class is the starting point for all traffic assignment runs. It either reads in inputs from a &lt;em&gt;&lt;strong&gt;specific location&lt;/strong&gt;&lt;/em&gt; or from
the &lt;em&gt;&lt;strong&gt;current working directory&lt;/strong&gt;&lt;/em&gt; upon creation of the object. Further configuration for the run is left to the user.&lt;/p&gt;
&lt;h4 id=&#34;defaults&#34;&gt;Defaults&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Value&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;../../../units&#34;&gt;Unit&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Output Formatter&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Object instance&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;../outputformatters/default&#34;&gt;Default Output Formatter&lt;/a&gt; (&lt;code&gt;OutputFormatter.PLANIT_IO&lt;/code&gt;)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;methods&#34;&gt;Methods&lt;/h4&gt;
&lt;p&gt;PlanitProject exposes the following methods&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;project_set+&#34;&gt;&lt;code&gt;.set(+)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Set the type of traffic assignment method to use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;project_activate+&#34;&gt;&lt;code&gt;.activate(+)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Activate additional types of output that are to be generated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;project_deactivate+&#34;&gt;&lt;code&gt;.deactivate(+)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Deactivate previously activated types of output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;project_run&#34;&gt;&lt;code&gt;.run()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Run simulation&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;properties&#34;&gt;Properties&lt;/h4&gt;
&lt;p&gt;PlanitProject exposes the following properties&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Availability&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;project_assignment&#34;&gt;&lt;code&gt;.assignment&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Post calling &lt;a href=&#34;planit_set+&#34;&gt;.set(+)&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Access to assignment instance&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;project_demands&#34;&gt;&lt;code&gt;.demands&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Always&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Access to in memory version of the demand inputs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;project_initial_costs&#34;&gt;&lt;code&gt;.initial_costs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Always&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Access to &lt;a href=&#34;./initialcost&#34;&gt;initial cost configuration&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;project_memory&#34;&gt;&lt;code&gt;.memory&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Post calling &lt;a href=&#34;planit_activate+&#34;&gt;&lt;code&gt;.activate(OutputFormatter.MEMORY)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Access to in-memory configuration of results &lt;/br&gt; including results themselves (Post calling &lt;a href=&#34;project_run&#34;&gt;.run()&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;project_network&#34;&gt;&lt;code&gt;.network&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Always&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Access to in-memory version of the physical network infrastructure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;project_output&#34;&gt;&lt;code&gt;.output&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Always&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Access to configuration for native output format (activated by default)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;project_zoning&#34;&gt;&lt;code&gt;.zoning&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Always&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Access to in-memory version of the zoning structure&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;example-1&#34;&gt;Example 1&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;planit&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# create a PLANit instance using &amp;#34;.&amp;#34; as the location for the input files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Planit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-2&#34;&gt;Example 2&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;planit&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# create a PLANit instance using a custom location to search for input files instead&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Planit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;planit_project&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;create_project&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;c:/users/&amp;lt;username&amp;gt;/my_project&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    For comprehensive examples, please have a look at the PLANit-Python &lt;a href=&#34;../../examples&#34;&gt;Examples&lt;/a&gt; section.

&lt;/div&gt;

&lt;h5 id=&#34;source-code&#34;&gt;Source code&lt;/h5&gt;
&lt;p&gt;Class &lt;code&gt;PLANit&lt;/code&gt; in &lt;code&gt;PLANit.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Assignment</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/assignment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/assignment/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all traffic assignment implementations available.&lt;/p&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../enums/trafficassignmenttype&#34;&gt;TrafficAssignment.&amp;lt;enum&amp;gt;&lt;/a&gt; for related assignment type enums&lt;br&gt;
&lt;a href=&#34;../../planitproject/project_set+&#34;&gt;planit.project.set(+)&lt;/a&gt; on how to set an assignment on PLANit&lt;br&gt;
&lt;a href=&#34;../planitproject/project_assignment&#34;&gt;planit.project.assignment&lt;/a&gt; on how to access a set traffic assignment instance&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;AssignmentWrapper&lt;/code&gt; in &lt;code&gt;projectwrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Converter Factory</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/converterfactory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/converterfactory/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for the &lt;code&gt;ConverterFactory&lt;/code&gt; class instance that can be collected from the top-level &lt;code&gt;Planit()&lt;/code&gt; instance
to create, i.e., manufacture, converters of a specific type. The most common use case for creating a converter would be
to convert a network from one format into another, e.g., parse an OSM network and persist it as a PLANit network for example.&lt;/p&gt;
&lt;p&gt;Converters provide an easy way to convert one data format into another by means of a predefined process that requires:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reader (input configuration)&lt;/li&gt;
&lt;li&gt;Writer (output configuration)&lt;/li&gt;
&lt;li&gt;Converter (perform the conversion from input to output)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;em&gt;reader&lt;/em&gt; extracts data from a certain input format and presents it to the converter internally as a PLANit memory model.
The &lt;em&gt;writer&lt;/em&gt; accepts a PLANit memory model and persists it in its output format. The &lt;em&gt;converter&lt;/em&gt; takes both a reader
and writer and performs the conversion via a dedicated procedure.&lt;/p&gt;
&lt;p&gt;PLANit-Python currently supports the following types of converters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;networkconverter&#34;&gt;NetworkConverter&lt;/a&gt;:  supports the conversion of road and/or rail infrastructure&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;zoningconverter&#34;&gt;ZoningConverter&lt;/a&gt;: supports the conversion of origin-destination zones, and transfer zones (bus stops, train platforms)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;demandsconverter&#34;&gt;DemandsConverter&lt;/a&gt;: supports the conversion of origin-destination trip demands&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;intermodalconverter&#34;&gt;IntermodalConverter&lt;/a&gt;: combines multiple converters into one to allow for conversions of networks and (public transport) services and infrastructure in a single process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There exist a number of reader/writer implementations that are supported out-of-the-box in PLANit-Python.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a user you can create your own reader/writers as well, although to use them you would need to utilise the Planit-Java
implementation. PLANit-Python only provides access to the officially supported readers/writers detailed in this manual.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;configuration-of-readerwriters&#34;&gt;Configuration of reader/writers&lt;/h4&gt;
&lt;p&gt;All readers/writers are to be created by your converter. Once you have create a reader and writer, it may need specific configuration.
To achieve this, all readers and writers have one or more settings properties, see &lt;a href=&#34;#example-1&#34;&gt;Example 1&lt;/a&gt;.
The properties and options vary per reader/writer, but all provide a settings property. In case of a converter that encompasses multiple
converters (like the intermodal converter). The settings of such a converter, in turn provide access, the to settings of each underlying
sub-converter.&lt;/p&gt;
&lt;p&gt;This approach of configuring all readers and writers in the same way can largely be done without providing complex parameters.
However, it does mean that the user - depending on the chosen reader/writer type - has to provide a bare minimum of configuration
settings before any conversion can proceed. To aid the user in what settings &lt;em&gt;&lt;strong&gt;must&lt;/strong&gt;&lt;/em&gt; be configured explicitly,
each reader/writer page in this manual details these settings to avoid any confusion.&lt;/p&gt;
&lt;h4 id=&#34;methods&#34;&gt;Methods&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;ConverterFactory&lt;/code&gt; instance exposes the following methods&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cf_create+&#34;&gt;&lt;code&gt;.create(+)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;create a novel converter based on the provided &lt;a href=&#34;../enums/convertertype&#34;&gt;&lt;code&gt;ConverterType&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;properties&#34;&gt;Properties&lt;/h4&gt;
&lt;p&gt;N/A&lt;/p&gt;
&lt;h4 id=&#34;example-1&#34;&gt;Example 1&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;planit&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# create a network converter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Planit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;network_converter&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;converter_factory&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ConverterType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NETWORK&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# example Open Street Map (OSM) network reader        &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;osm_reader&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;network_converter&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;create_reader&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NetworkReaderType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;OSM&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Australia&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;osm_reader&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;settings&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;set_input_file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;lt;path_to_input_file&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# example PLANit network writer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;planit_writer&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;network_converter&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;create_writer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NetworkWriterType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PLANIT&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;planit_writer&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;settings&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;set_output_directory&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;lt;path_to_output_dir&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;planit_writer&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;settings&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;set_country&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Australia&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# perform conversion&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;network_converter&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;convert&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;reader&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;writer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;networkconverter&#34;&gt;NetworkConverter&lt;/a&gt; for more information on how to create and configure a network converter&lt;br&gt;
&lt;a href=&#34;zoningconverter&#34;&gt;ZoningConverter&lt;/a&gt; for more information on how to create and configure a zoning converter&lt;br&gt;
&lt;a href=&#34;demandsconverter&#34;&gt;DemandsConverter&lt;/a&gt; for more information on how to create and configure a demands (od trips) converter&lt;br&gt;
&lt;a href=&#34;intermodalconverter&#34;&gt;IntermodalConverter&lt;/a&gt; for more information on how to create and configure an intermodal converter&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;ConverterFactory&lt;/code&gt; in &lt;code&gt;converter.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Converter Reader</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/converterreader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/converterreader/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all converter compatible input readers. Such readers can be instantiated via the
&lt;a href=&#34;../converterfactory&#34;&gt;&lt;code&gt;ConverterFactory&lt;/code&gt;&lt;/a&gt; class instance that can be collected from the top-level &lt;code&gt;Planit()&lt;/code&gt;
instance to create, i.e., manufacture, converter readers of a specific type. Such readers can be used to parse a
particular input data source and either manipulate it in memory or convert it into a different format through a compatible writer.&lt;/p&gt;
&lt;p&gt;Currently, the following types of readers exist:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network readers&lt;/li&gt;
&lt;li&gt;Zoning readers&lt;/li&gt;
&lt;li&gt;Demand readers&lt;/li&gt;
&lt;li&gt;Intermodal readers
&lt;ul&gt;
&lt;li&gt;without services (combination of network and zoning reader)&lt;/li&gt;
&lt;li&gt;with services (combination of network, zoning, service network, and routed services reader)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Service network readers (only available in Java edition)&lt;/li&gt;
&lt;li&gt;Routed services readers (only available in Java edition)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../converterfactory&#34;&gt;ConverterFactory&lt;/a&gt; for more information on how to use readers in combination with a converter&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;converterwrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Converter Writer</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/converterwriter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/converterwriter/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all converter compatible input writers. Writers can be instantiated via the &lt;a href=&#34;../converterfactory&#34;&gt;&lt;code&gt;ConverterFactory&lt;/code&gt;&lt;/a&gt; class instance that can be collected from the top-level &lt;code&gt;Planit()&lt;/code&gt; instance to create, i.e., manufacture, converter writers of a specific type. Such readers can be used to persist in a paraticular format given a compatible PLANit memory model instance.&lt;/p&gt;
&lt;p&gt;Currently, the following types of writers exist:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network writers&lt;/li&gt;
&lt;li&gt;Zoning writers&lt;/li&gt;
&lt;li&gt;Demand writers&lt;/li&gt;
&lt;li&gt;Intermodal writers
&lt;ul&gt;
&lt;li&gt;without services (combination of network and zoning reader)&lt;/li&gt;
&lt;li&gt;with services (combination of network, zoning, service network, and routed services reader)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Service network writer (only available in Java edition)&lt;/li&gt;
&lt;li&gt;Routed services writers (only available in Java edition)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../converterfactory&#34;&gt;ConverterFactory&lt;/a&gt; for more information on how to use writers in combination with a converter&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;converterwrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Demands</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/demands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/demands/</guid>
      <description>
        
        
        &lt;p&gt;Demands implementation, is the in-memory equivalent of the parsed input demands. In future version of PLANit we intend to make the contents of this class available to the user.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Currently, no methods and/or properties are officially exposed/supported for this class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;N/A&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;DemandsWrapper&lt;/code&gt; in &lt;code&gt;projectwrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Enums</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/enums/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/enums/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation of classes exposing enums for configuration purposes. These classes exist to allow you to quickly - and with representative names - (de-)activate and/or configure traffic assignment components in Planit&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Gap Function</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/gapfunction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/gapfunction/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all Gap function implementations available.&lt;/p&gt;
&lt;p&gt;A gap function allows you to determine the difference between your current traffic assignment results in a particular iteration and the adopted equilibrium criterion. This difference is referred to as the &lt;em&gt;gap&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In this context, each gap function has a stop criterion associated with it, that in turn can be configured to determine the conditions under which you accept the results to be &lt;em&gt;close enough&lt;/em&gt; to equilibrium, i.e., the &lt;em&gt;gap&lt;/em&gt; being sufficiently small, for the simulation to terminate.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There exist many gap functions and stop criteria and not all traffic assignment methods and equilibrium conditions are compatible with all gap functions and/or stop criteria implementations. Make sure that the chosen gap function is supported by your traffic assignment method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../assignment&#34;&gt;Traffic Assignment&lt;/a&gt; on what traffic assignment methods are available&lt;br&gt;
&lt;a href=&#34;../stopcriterion&#34;&gt;Stop Criterion&lt;/a&gt; on stop criterion implementations&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;GapFunctionWrapper&lt;/code&gt; in &lt;code&gt;projectwrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Initial Cost</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/initialcost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/initialcost/</guid>
      <description>
        
        
        &lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;Reference documentation for the initial cost configuration. Initial costs can be configured across all available time periods, or specifically tied to a time period. Planit will utilise the most specific initial costs available, meaning that it will first look for&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Initial costs for the current time period&lt;/em&gt;, these have the highest priority&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If not available, Planit will look for initial costs defined without a time period label;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Generic initial costs for all time periods (if any)&lt;/em&gt;, these are of secondary priority&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If those are also not available, PLANit will not attempt to impose any initial costs at all.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Currently initial costs can only be provided on the link segment level.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;link-segment-initial-costs&#34;&gt;Link Segment initial costs&lt;/h5&gt;
&lt;p&gt;PLANit-Python accepts earlier persisted link segment results as initial cost inputs. The only requirements are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../enums/outputpropertytype&#34;&gt;&lt;code&gt;OutputProperty.LINK_SEGMENT_COST&lt;/code&gt;&lt;/a&gt; must have been activated, i.e., the cost column is present in the results&lt;/li&gt;
&lt;li&gt;Valid &lt;a href=&#34;../outputconfiguration/link#identification&#34;&gt;link segment identification method&lt;/a&gt;, i.e., each result row must be uniquely identifiable as a link segment&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;supported-data-formats&#34;&gt;Supported Data formats&lt;/h5&gt;
&lt;p&gt;Initial costs can be parsed from output generated by the following output formatters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../outputformatters/default&#34;&gt;PLANit Default Output Formatter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;defaults&#34;&gt;Defaults&lt;/h4&gt;
&lt;p&gt;No defaults (yet)&lt;/p&gt;
&lt;h4 id=&#34;methods&#34;&gt;Methods&lt;/h4&gt;
&lt;p&gt;Initial Costs exposes the following methods&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;ic_set+&#34;&gt;&lt;code&gt;.set(+)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Set initial costs, by time period, or across time periods&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;properties&#34;&gt;Properties&lt;/h4&gt;
&lt;p&gt;This class has no properties (yet):&lt;/p&gt;
&lt;h4 id=&#34;example-1&#34;&gt;Example 1&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;planit&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#create instance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Planit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#set initial costs for all periods&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;project&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;initial_costs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;lt;path_to_initial_costs_csv&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#override initial costs for time period with XML id &amp;#34;1&amp;#34; with more specific costs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;project&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;initial_costs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;lt;path_to_initial_costs_period_1_csv&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../outputformatters/default&#34;&gt;Default Output Formatter&lt;/a&gt; implementation&lt;br&gt;
&lt;a href=&#34;../outputconfiguration/link&#34;&gt;link Output Configuration&lt;/a&gt; implementation&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;InitialCost&lt;/code&gt; in &lt;code&gt;Initial_cost.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Output Configuration</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/outputconfiguration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/outputconfiguration/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all output (type) configuration implementations available.&lt;/p&gt;
&lt;p&gt;Output configurations allow you to configure the - to be generated - outputs.&lt;/p&gt;
&lt;p&gt;At the top-level, general output configuration options are available through the OutputConfiguration implementation&lt;/p&gt;
&lt;p&gt;More specific configurations have a dedicated type associated with it, e.g. link output type configuration is specific to the link output configuration. These more specific configurations are only available when that output type has been activated.&lt;/p&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../enums/outputtype&#34;&gt;OutputType.&amp;lt;enum&amp;gt;&lt;/a&gt; for the available output type enums&lt;br&gt;
&lt;a href=&#34;../assignment&#34;&gt;Traffic Assignment&lt;/a&gt; to see how to activate output types via the various assignment implementations&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Output Formatters</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/outputformatters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/outputformatters/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all output formatter implementations available.&lt;/p&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../enums/outputformattertype&#34;&gt;Outputformatter.&amp;lt;enum&amp;gt;&lt;/a&gt; for related output formatter type enums&lt;br&gt;
&lt;a href=&#34;../planitproject/project_activate+&#34;&gt;planit.project.activate(+)&lt;/a&gt; to see how to activate output formatters&lt;br&gt;
&lt;a href=&#34;../planitproject/project_deactivate+&#34;&gt;planit.project.deactivate(+)&lt;/a&gt; to see how to de-activate output formatters&lt;br&gt;
&lt;a href=&#34;../planitproject/project_output&#34;&gt;planit.project.output&lt;/a&gt; on how to access the default output formatter instance (if active)&lt;br&gt;
&lt;a href=&#34;../planitproject/project_memory&#34;&gt;planit.project.memory&lt;/a&gt; on how to access the memory output formatter instance (if active)&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;OutputFormatterWrapper&lt;/code&gt; in &lt;code&gt;projectwrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Physical Cost</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/physicalcost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/physicalcost/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all Physical Cost implementations available.&lt;/p&gt;
&lt;p&gt;Physical Cost refers to cost incurred on the modelled physical transport network. This in contrast to &lt;a href=&#34;../virtualcost&#34;&gt;Virtual Cost&lt;/a&gt; which refers to cost incurred on the virtual transport network (portion of a trip between departing/arriving from/at a zone and the first modelled physical infrastructure entity (node/link).&lt;/p&gt;
&lt;p&gt;The generalised cost for any path consist of the physical and virtual cost combined.&lt;/p&gt;
&lt;p&gt;How physical cost is computed depends on the method. Methods are often dependent on the chosen &lt;a href=&#34;../assignment&#34;&gt;Traffic Assignment&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../enums/physicalcosttype&#34;&gt;PhysicalCost.&amp;lt;enum&amp;gt;&lt;/a&gt; for physical cost type enums&lt;br&gt;
&lt;a href=&#34;../assignment&#34;&gt;Traffic Assignment&lt;/a&gt; on what traffic assignment methods are available&lt;br&gt;
&lt;a href=&#34;../enums/virtualcosttype&#34;&gt;VirtualCost.&amp;lt;enum&amp;gt;&lt;/a&gt; for virtual cost type enums&lt;br&gt;
&lt;a href=&#34;../virtualcost&#34;&gt;Virtual Cost&lt;/a&gt; on options for the virtual cost implementations&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;PhysicalCostWrapper&lt;/code&gt; in &lt;code&gt;projectwrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Physical Network</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/network/</guid>
      <description>
        
        
        &lt;p&gt;Network implementation, is the in-memory equivalent of the parsed physical (transport) network. In future version of PLANit we intend to make the contents of this class available to the user.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Currently, no methods and/or properties are officially exposed/supported for this class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;N/A&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;PhysicalNetworkWrapper&lt;/code&gt; in &lt;code&gt;projectwrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Smoothing</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/smoothing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/smoothing/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all Smoothing implementations available.&lt;/p&gt;
&lt;p&gt;Smoothing refers to the method of weighing the impact of an iteration&amp;rsquo;s result on the final outcome of a traffic assignment equilibration process.&lt;/p&gt;
&lt;p&gt;Typically, it utilises the &lt;em&gt;&lt;strong&gt;result up to the most recent iteration&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;the most recent iteration&amp;rsquo;s result&lt;/strong&gt;&lt;/em&gt; to construct a &lt;em&gt;&lt;strong&gt;new result&lt;/strong&gt;&lt;/em&gt; where one weighs the impact of both in a certain way. this new result is then used to continue the simulation for the next iteration.&lt;/p&gt;
&lt;p&gt;For example, if no smoothing is applied, the most recent iteration results become the new result, whereas if smoothing is at maximum, none of the most recent iteration&amp;rsquo;s outcomes are adopted. Instead, the result up to but not including the most recent iteration become the new results, i.e., copying the previous outcome without change. In practice neither of these two is attractive and a middle ground has to be found. This is what the smoothing method does and many different methods exist to achieve this.&lt;/p&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../enums/smoothingtype&#34;&gt;Smoothing.&amp;lt;enum&amp;gt;&lt;/a&gt; for smoothing cost type enums&lt;br&gt;
&lt;a href=&#34;../assignment&#34;&gt;Traffic Assignment&lt;/a&gt; on what traffic assignment methods are available&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;SmoothingWrapper&lt;/code&gt; in &lt;code&gt;projectwrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Stop Criterion</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/stopcriterion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/stopcriterion/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all Stop Criterion implementations available.&lt;/p&gt;
&lt;p&gt;A stop criterion can be used to configure when an algorithm terminates. In our context, the algorithm is a traffic assignment run searching for equilibrium and the stop criterion is compared against a measured gap (constructed using a &lt;a href=&#34;../gapfunction&#34;&gt;gap function&lt;/a&gt;) for the current iteration.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Currently, a single &lt;a href=&#34;default&#34;&gt;default implementation&lt;/a&gt; is available, used by all gap functions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../gapfunction&#34;&gt;Gap Function&lt;/a&gt; on gap function implementations&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;StopCriterionWrapper&lt;/code&gt; in &lt;code&gt;projectwrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Virtual Cost</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/virtualcost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/virtualcost/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all Virtual Cost implementations available.&lt;/p&gt;
&lt;p&gt;Virtual Cost refers to cost incurred on the virtual transport network (portion of a trip between departing/arriving from/at a zone and the first modelled physical infrastructure entity (node/link). This in contrast to &lt;a href=&#34;../physicalcost&#34;&gt;Physical Cost&lt;/a&gt; which refers to cost incurred on the modelled physical transport network.&lt;/p&gt;
&lt;p&gt;The generalised cost for any path consist of the physical and virtual cost combined.&lt;/p&gt;
&lt;p&gt;How virtual cost is computed depends on the method. Methods are potentially dependent on the chosen &lt;a href=&#34;../assignment&#34;&gt;Traffic Assignment&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../enums/virtualcosttype&#34;&gt;VirtualCost.&amp;lt;enum&amp;gt;&lt;/a&gt; for virtual cost type enums&lt;br&gt;
&lt;a href=&#34;../assignment&#34;&gt;Traffic Assignment&lt;/a&gt; on what traffic assignment methods are available&lt;br&gt;
&lt;a href=&#34;../enums/physicalcosttype&#34;&gt;PhysicalCost.&amp;lt;enum&amp;gt;&lt;/a&gt; for physical cost type enums&lt;br&gt;
&lt;a href=&#34;../physicalcost&#34;&gt;Physical Cost&lt;/a&gt; on options for the physical cost implementations&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;VirtualCostWrapper&lt;/code&gt; in &lt;code&gt;projectwrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Zoning</title>
      <link>https://planitmanual.github.io/version/0_4_0/docs/python/reference/zoning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://planitmanual.github.io/version/0_4_0/docs/python/reference/zoning/</guid>
      <description>
        
        
        &lt;p&gt;Zoning implementation, is the in-memory equivalent of the parsed zoning structure. In future version of PLANit we intend to make the contents of this class available to the user.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Currently, no methods and/or properties are officially exposed/supported for this class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;N/A&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;ZoningWrapper&lt;/code&gt; in &lt;code&gt;projectwrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
