<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PLANit â€“ PLANit-Python Reference</title>
    <link>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/</link>
    <description>Recent content in PLANit-Python Reference on PLANit</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: PLANit(&#43;)</title>
      <link>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/planit&#43;/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/planit&#43;/</guid>
      <description>
        
        
        &lt;h5 id=&#34;description&#34;&gt;Description&lt;/h5&gt;
&lt;p&gt;This class is the starting point for all PLANit traffic assignment runs. It either reads in inputs from a &lt;em&gt;&lt;strong&gt;specific location&lt;/strong&gt;&lt;/em&gt; or from
the &lt;em&gt;&lt;strong&gt;current working directory&lt;/strong&gt;&lt;/em&gt; upon creation of the object. Further configuration for the run is left to the user.&lt;/p&gt;
&lt;h4 id=&#34;defaults&#34;&gt;Defaults&lt;/h4&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h4 id=&#34;parameters&#34;&gt;Parameters&lt;/h4&gt;
&lt;p&gt;Available parameters upon construction:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Compulsory&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;project_path&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;None&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Location of directory to find input files&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;methods&#34;&gt;Methods&lt;/h4&gt;
&lt;p&gt;PLANit exposes the following methods&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;planit_set+&#34;&gt;&lt;code&gt;.set(+)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set the type of traffic assignment method to use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;planit_activate+&#34;&gt;&lt;code&gt;.activate(+)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Activate additional types of output that are to be generated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;planit_deactivate+&#34;&gt;&lt;code&gt;.deactivate(+)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Deactivate previously activated types of output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;planit_run&#34;&gt;&lt;code&gt;.run()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Run simulation&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;properties&#34;&gt;Properties&lt;/h4&gt;
&lt;p&gt;Planit exposes the follogin properties&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Availability&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;planit_assignment&#34;&gt;&lt;code&gt;.assignment&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Post calling &lt;a href=&#34;planit_set+&#34;&gt;.set(+)&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Access to assignment instance&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;planit_demands&#34;&gt;&lt;code&gt;.demands&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Always&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Access to in memory version of the demand inputs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.initial_costs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Always&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;planit_memory&#34;&gt;&lt;code&gt;.memory&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Post calling &lt;a href=&#34;planit_activate+&#34;&gt;&lt;code&gt;.activate(OutputFormatter.MEMORY)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Access to in-memory configuration of results &lt;/br&gt; including results themselves (Post calling &lt;a href=&#34;planit_run&#34;&gt;.run()&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;planit_network&#34;&gt;&lt;code&gt;.network&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Always&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Access to in-memory version of the physical network infrastructure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;planit_output&#34;&gt;&lt;code&gt;.output&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Always&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Access to configuration for native output format (activated by default)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;planit_zoning&#34;&gt;&lt;code&gt;.zoning&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Always&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Access to in-memory version of the zoning structure&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;example-1&#34;&gt;Example 1&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Create a PLANit instance using &amp;#34;.&amp;#34; as the location for the input files&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PLANit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-2&#34;&gt;Example 2&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Create a PLANit instance using a custom location to search for input files instead&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PLANit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;c:/users/&amp;lt;username&amp;gt;/my_project&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;
For comprehensive examples, please have a look at the PLANit-Python &lt;a href=&#34;../../examples&#34;&gt;Examples&lt;/a&gt; section.
&lt;/div&gt;

&lt;h5 id=&#34;source-code&#34;&gt;Source code&lt;/h5&gt;
&lt;p&gt;Class &lt;code&gt;PLANit&lt;/code&gt; in &lt;code&gt;PLANit.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Assignment</title>
      <link>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/assignment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/assignment/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all traffic assignment implementations available.&lt;/p&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../enums/trafficassignmenttype&#34;&gt;TrafficAssignment.&amp;lt;enum&amp;gt;&lt;/a&gt; for related assignment type enums
&lt;a href=&#34;../../planit+/planit_set+&#34;&gt;PLANit.set(+)&lt;/a&gt; on how to set an assignment on PLANit&lt;br&gt;
&lt;a href=&#34;../planit+/planit_assignment&#34;&gt;planit(+).assignment&lt;/a&gt; on how to access a set traffic assignment instance&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;AssignmentWrapper&lt;/code&gt; in &lt;code&gt;Wrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Enums</title>
      <link>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/enums/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/enums/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation of classes exposing enums for configuration purposes. These classes exist to allow you to quickly - and with representative names - (de-)activate and/or configure traffic assignment components in PLANit&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Output Configuration</title>
      <link>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/outputconfiguration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/outputconfiguration/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all output (type) configuration implementations available.&lt;/p&gt;
&lt;p&gt;Output configurations allow you to configure the - to be generated - outputs.&lt;/p&gt;
&lt;p&gt;At the top-level, general output configuration options are available through the OutputConfiguration implementation&lt;/p&gt;
&lt;p&gt;More specific configurations have a dedicated type associated with it, e.g. link output type configuration is specific to the link output configuration. These more specific configurations are only available when that output type has been activated.&lt;/p&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../enums/outputtype&#34;&gt;OutputType.&amp;lt;enum&amp;gt;&lt;/a&gt; for the available output type enums&lt;br&gt;
&lt;a href=&#34;../assignment&#34;&gt;Traffic Assignment&lt;/a&gt; to see how to activate output types via the various assignment implementations&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;N/A&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Output Formatters</title>
      <link>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/outputformatters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/outputformatters/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all output formatter implementations available.&lt;/p&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../enums/outputformattertype&#34;&gt;Outputformatter.&amp;lt;enum&amp;gt;&lt;/a&gt; for related output formatter type enums&lt;br&gt;
&lt;a href=&#34;../../planit+/planit_activate+&#34;&gt;PLANit.activate(+)&lt;/a&gt; to see how to activate output formatters&lt;br&gt;
&lt;a href=&#34;../../planit+/planit_deactivate+&#34;&gt;PLANit.deactivate(+)&lt;/a&gt; to see how to de-activate output formatters&lt;br&gt;
&lt;a href=&#34;../planit+/planit_output&#34;&gt;planit(+).output&lt;/a&gt; on how to access the default output formatter instance (if active)&lt;br&gt;
&lt;a href=&#34;../planit+/planit_memory&#34;&gt;planit(+).memory&lt;/a&gt; on how to access the memory output formatter instance (if active)&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;OutputFormatterWrapper&lt;/code&gt; in &lt;code&gt;Wrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Physical Cost</title>
      <link>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/physicalcost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/physicalcost/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all Physical Cost implementations available.&lt;/p&gt;
&lt;p&gt;Physical Cost refers to cost incurred on the modelled physical transport network. This in contrast to &lt;a href=&#34;../virtualcost&#34;&gt;Virtual Cost&lt;/a&gt; which refers to cost incurred on the virtual transport network (portion of a trip between departing/arriving from/at a zone and the first modelled physical infrastructure entity (node/link).&lt;/p&gt;
&lt;p&gt;The generalised cost for any path consist of the physical and virtual cost combined.&lt;/p&gt;
&lt;p&gt;How physical cost is computed depends on the method. Methods are often dependent on the chosen &lt;a href=&#34;../assignment&#34;&gt;Traffic Assignment&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../enums/physicalcosttype&#34;&gt;PhysicalCost.&amp;lt;enum&amp;gt;&lt;/a&gt; for physical cost type enums&lt;br&gt;
&lt;a href=&#34;../assignment&#34;&gt;Traffic Assignment&lt;/a&gt; on what traffic assignment methods are available
&lt;a href=&#34;../enums/virtualcosttype&#34;&gt;VirtualCost.&amp;lt;enum&amp;gt;&lt;/a&gt; for virtual cost type enums&lt;br&gt;
&lt;a href=&#34;../virtualcost&#34;&gt;Virtual Cost&lt;/a&gt; on options for the virtual cost implementations&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;PhysicalCostWrapper&lt;/code&gt; in &lt;code&gt;Wrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Smoothing</title>
      <link>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/smoothing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/smoothing/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all Smoothing implementations available.&lt;/p&gt;
&lt;p&gt;Smoothing refers to the method of weighing the impact of an iteration&amp;rsquo;s result on the final outcome of a traffic assignment equilibration process.&lt;/p&gt;
&lt;p&gt;Typically, it utilises the &lt;em&gt;&lt;strong&gt;result up to the most recent iteration&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;the most recent iteration&amp;rsquo;s result&lt;/strong&gt;&lt;/em&gt; to construct a &lt;em&gt;&lt;strong&gt;new result&lt;/strong&gt;&lt;/em&gt; where one weighs the impact of both in a certain way. this new result is then used to continue the simulation for the next iteration.&lt;/p&gt;
&lt;p&gt;For example, if no smoothing is applied, the most recent iteration results become the new result, whereas if smoothing is at maximum, none of the most recent iteration&amp;rsquo;s outcomes are adopted. Instead, the result up to but not including the most recent iteration become the new results, i.e., copying the previous outcome without change. In practice neither of these two is attractive and a middle ground has to be found. This is what the smoothing method does and many different methods exist to achieve this.&lt;/p&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../enums/smoothingtype&#34;&gt;Smoothing.&amp;lt;enum&amp;gt;&lt;/a&gt; for smoothing cost type enums&lt;br&gt;
&lt;a href=&#34;../assignment&#34;&gt;Traffic Assignment&lt;/a&gt; on what traffic assignment methods are available&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;SmoothingWrapper&lt;/code&gt; in &lt;code&gt;Wrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Virtual Cost</title>
      <link>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/virtualcost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/virtualcost/</guid>
      <description>
        
        
        &lt;p&gt;Reference documentation for all Virtual Cost implementations available.&lt;/p&gt;
&lt;p&gt;Virtual Cost refers to cost incurred on the virtual transport network (portion of a trip between departing/arriving from/at a zone and the first modelled physical infrastructure entity (node/link). This in contrast to &lt;a href=&#34;../physicalcost&#34;&gt;Physical Cost&lt;/a&gt; which refers to cost incurred on the modelled physical transport network.&lt;/p&gt;
&lt;p&gt;The generalised cost for any path consist of the physical and virtual cost combined.&lt;/p&gt;
&lt;p&gt;How virtual cost is computed depends on the method. Methods are potentially dependent on the chosen &lt;a href=&#34;../assignment&#34;&gt;Traffic Assignment&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;see-also&#34;&gt;See also&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../enums/virtualcosttype&#34;&gt;VirtualCost.&amp;lt;enum&amp;gt;&lt;/a&gt; for virtual cost type enums
&lt;a href=&#34;../assignment&#34;&gt;Traffic Assignment&lt;/a&gt; on what traffic assignment methods are available
&lt;a href=&#34;../enums/physicalcosttype&#34;&gt;PhysicalCost.&amp;lt;enum&amp;gt;&lt;/a&gt; for physical cost type enums&lt;br&gt;
&lt;a href=&#34;../physicalcost&#34;&gt;Physical Cost&lt;/a&gt; on options for the physical cost implementations&lt;/p&gt;
&lt;h4 id=&#34;source-code&#34;&gt;Source code&lt;/h4&gt;
&lt;p&gt;Class &lt;code&gt;VirtualCostWrapper&lt;/code&gt; in &lt;code&gt;Wrappers.py&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
