<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PLANit â€“ Documentation</title>
    <link>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/</link>
    <description>Recent content in Documentation on PLANit</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: .set(&#43;)</title>
      <link>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/planit&#43;/planit_set&#43;/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/planit&#43;/planit_set&#43;/</guid>
      <description>
        
        
        &lt;h5 id=&#34;description&#34;&gt;Description&lt;/h5&gt;
&lt;p&gt;This set allows you to set the type of traffic assignment to use on your planit instance.&lt;/p&gt;
&lt;h5 id=&#34;use&#34;&gt;Use&lt;/h5&gt;
&lt;p&gt;Assuming &lt;code&gt;instance = PLANit()&lt;/code&gt; is available, set your choice of assignment via &lt;code&gt;instance.set(TrafficAssignment.&amp;lt;enum&amp;gt;)&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id=&#34;parameters&#34;&gt;Parameters&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Compulsory&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TrafficAssignment.&amp;lt;enum&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TrafficAssignmentType&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Type of traffic assignment to apply&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;example1&#34;&gt;Example1&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Choose to run PLANit with a traditional static traffic assignment method&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PLANit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TrafficAssignment&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TRADITIONAL_STATIC&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Traditional static assignment</title>
      <link>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/planit&#43;/assignment/traditional_static/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/planit&#43;/assignment/traditional_static/</guid>
      <description>
        
        
        &lt;h5 id=&#34;description&#34;&gt;Description&lt;/h5&gt;
&lt;p&gt;The traditional static traffic assignment instance let&amp;rsquo;s you configure the most well-known of all traffic assignment methods. Implementation is based on Beckmann (1956)&lt;sup&gt;1&lt;/sup&gt; supporting multiple time periods and modes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;sup&gt;1&lt;/sup&gt; Beckmann, M., McGuire, C. B., &amp;amp; Winsten, B. W. (1956). Studies in the economics of transportation. New Haven CT, USA: Yale University Press.&lt;/em&gt;&lt;/p&gt;
&lt;h5 id=&#34;use&#34;&gt;Use&lt;/h5&gt;
&lt;p&gt;Assuming &lt;code&gt;instance = PLANit()&lt;/code&gt; is available, instantiate traditional static assignment via &lt;code&gt;instance.set( TrafficAssignment.TRADITIONAL_STATIC)&lt;/code&gt;. After this, the assignment instance can be accessed via &lt;code&gt;instance.assignment&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;type&#34;&gt;Type&lt;/h5&gt;
&lt;p&gt;Class &lt;code&gt;TraditionalStaticAssignmentWrapper&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;see-also&#34;&gt;See also&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;../../planit_set+&#34;&gt;&lt;code&gt;instance.set(+)&lt;/code&gt;&lt;/a&gt; to see how to set the traffic assignment type&lt;br&gt;
&lt;a href=&#34;../&#34;&gt;&lt;code&gt;instance.assignment&lt;/code&gt;&lt;/a&gt; to see how to use the .assignment property&lt;/p&gt;
&lt;h5 id=&#34;fields&#34;&gt;Fields&lt;/h5&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h5 id=&#34;example-1&#34;&gt;Example 1&lt;/h5&gt;
&lt;p&gt;TODO&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: OutputFormatter.&lt;enum&gt;</title>
      <link>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/enums/outputformattertype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pages.github.sydney.edu.au/PLANit/PLANitManual/docs/python/reference/enums/outputformattertype/</guid>
      <description>
        
        
        &lt;h5 id=&#34;description&#34;&gt;Description&lt;/h5&gt;
&lt;p&gt;Class exposing supported output formatters as enums.&lt;/p&gt;
&lt;h5 id=&#34;use&#34;&gt;Use&lt;/h5&gt;
&lt;p&gt;Assuming &lt;code&gt;instance = PLANit()&lt;/code&gt; is available, you activate an output formatter via &lt;code&gt;instance.activate(OutputFormatter.&amp;lt;enum&amp;gt;)&lt;/code&gt;. After this, the chosen formatter can be accessed as outlined in the &lt;strong&gt;Access instance via&lt;/strong&gt; column in &lt;a href=&#34;#fields&#34;&gt;Fields&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;see-also&#34;&gt;See also&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;../../planit+/planit_activate+&#34;&gt;&lt;code&gt;instance.activate(+)&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;type&#34;&gt;Type&lt;/h5&gt;
&lt;p&gt;Class OutputFormatter&lt;/p&gt;
&lt;h5 id=&#34;fields&#34;&gt;Fields&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Access instance via&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PLANIT_IO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PLANit&amp;rsquo;s native output format&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;../../planit+/output&#34;&gt;&lt;code&gt;instance.output&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEMORY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Stores results in memory&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;../../planit+/memory&#34;&gt;&lt;code&gt;instance.memory&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;example-1&#34;&gt;Example 1&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Without any explicit activation of any output formatter, PLANit will automatically &lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# activate PLAN_IO upon the creation of the traffic assignment. No explicit action needed&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PLANit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TrafficAssignment&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TRADITIONAL_STATIC&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# the output formatter is then accessible via the x.output property&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;some&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;example-2&#34;&gt;Example 2&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PLANit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Activate memory based output formatting&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;activate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;OutputFormatter&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MEMORY&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# access memory based output formatter instance to configure further&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;planit_instance&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;memory&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;some&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>
